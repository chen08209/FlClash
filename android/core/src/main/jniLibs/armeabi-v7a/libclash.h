/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package core */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 5 "android_bride.go"

#include <stdlib.h>

typedef void (*release_object_func)(void *obj);

typedef void (*protect_func)(void *tun_interface, int fd);

typedef const char* (*resolve_process_func)(void *tun_interface, int protocol, const char *source, const char *target, int uid);

static void protect(protect_func fn, void *tun_interface, int fd) {
    if (fn) {
        fn(tun_interface, fd);
    }
}

static const char* resolve_process(resolve_process_func fn, void *tun_interface, int protocol, const char *source, const char *target, int uid) {
    if (fn) {
        return fn(tun_interface, protocol, source, target, uid);
    }
    return "";
}

static void release_object(release_object_func fn, void *obj) {
    if (fn) {
        return fn(obj);
    }
}

#line 1 "cgo-generated-wrapper"

#line 5 "lib.go"

#include <stdlib.h>

#line 1 "cgo-generated-wrapper"



/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void registerCallbacks(protect_func markSocketFunc, resolve_process_func resolveProcessFunc, release_object_func releaseObjectFunc);
extern void initNativeApiBridge(void* api);
extern void attachMessagePort(long long mPort);
extern char* getTraffic();
extern char* getTotalTraffic();
extern void freeCString(char* s);
extern void invokeAction(char* paramsChar, long long port);
extern char* getConfig(char* s);
extern void startListener();
extern void stopListener();
extern void quickStart(char* initParamsChar, char* paramsChar, char* stateParamsChar, long long port);
extern GoUint8 startTUN(int fd, void* callback);
extern char* getRunTime();
extern void stopTun();
extern char* getCurrentProfileName();
extern char* getAndroidVpnOptions();
extern void setState(char* s);
extern void updateDns(char* s);

#ifdef __cplusplus
}
#endif
